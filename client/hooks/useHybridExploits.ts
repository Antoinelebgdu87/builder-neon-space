import { useState, useEffect } from 'react';
import { collection, addDoc, updateDoc, deleteDoc, doc, onSnapshot, serverTimestamp } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { shouldUseFirebaseOnly } from '@/utils/cleanupLocalStorage';

export interface Exploit {
  id?: string;
  name: string;
  description: string;
  imageUrl: string;
  downloads: string;
  platforms: string[];
  isVerified?: boolean;
  isPopular?: boolean;
  gradient?: string;
  downloadUrl?: string;
  createdAt?: any;
  updatedAt?: any;
}

const LOCAL_STORAGE_KEY = 'sysbreak_exploits_hybrid';

export function useHybridExploits() {
  const [exploits, setExploits] = useState<Exploit[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [useFirebase, setUseFirebase] = useState(shouldUseFirebaseOnly() ? true : true);

  const loadFromLocalStorage = () => {
    try {
      const stored = localStorage.getItem(LOCAL_STORAGE_KEY);
      if (stored) {
        const parsedExploits = JSON.parse(stored);
        setExploits(parsedExploits);
      }
    } catch (err) {
      console.error('Error loading from localStorage:', err);
    }
  };

  const saveToLocalStorage = (newExploits: Exploit[]) => {
    try {
      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(newExploits));
      setExploits(newExploits);
    } catch (err) {
      console.error('Error saving to localStorage:', err);
    }
  };

  useEffect(() => {
    if (useFirebase) {
      const unsubscribe = onSnapshot(
        collection(db, 'exploits'),
        (snapshot) => {
          try {
            const exploitsData = snapshot.docs.map(doc => ({
              id: doc.id,
              ...doc.data()
            })) as Exploit[];
            
            exploitsData.sort((a, b) => {
              if (!a.createdAt || !b.createdAt) return 0;
              return new Date(b.createdAt.toDate()).getTime() - new Date(a.createdAt.toDate()).getTime();
            });
            
            setExploits(exploitsData);
            setError(null);
            setLoading(false);
            saveToLocalStorage(exploitsData);
          } catch (err) {
            console.error('Error processing Firebase data:', err);
            loadFromLocalStorage();
            setUseFirebase(false);
            setLoading(false);
          }
        },
        (err) => {
          console.error('Firebase permission error:', err);
          loadFromLocalStorage();
          setUseFirebase(false);
          if (err.code === 'permission-denied') {
            setError('⚠️ Firebase: Permissions insuffisantes - Mode local activé');
          } else {
            setError('Mode hors ligne - Firebase inaccessible');
          }
          setLoading(false);
        }
      );

      return () => unsubscribe();
    } else {
      loadFromLocalStorage();
      setLoading(false);
    }
  }, [useFirebase]);

  const addExploit = async (exploit: Omit<Exploit, 'id' | 'createdAt' | 'updatedAt'>) => {
    const newExploit: Exploit = {
      ...exploit,
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    if (useFirebase) {
      try {
        const docRef = await addDoc(collection(db, 'exploits'), {
          ...exploit,
          createdAt: serverTimestamp(),
          updatedAt: serverTimestamp()
        });
        
        return { id: docRef.id, ...exploit };
      } catch (error) {
        console.error('Firebase add error, falling back to localStorage:', error);
        setUseFirebase(false);
      }
    }

    const updatedExploits = [newExploit, ...exploits];
    saveToLocalStorage(updatedExploits);
    return newExploit;
  };

  const updateExploit = async (id: string, updates: Partial<Exploit>) => {
    if (useFirebase) {
      try {
        await updateDoc(doc(db, 'exploits', id), {
          ...updates,
          updatedAt: serverTimestamp()
        });
        return;
      } catch (error) {
        console.error('Firebase update error, falling back to localStorage:', error);
        setUseFirebase(false);
      }
    }

    const updatedExploits = exploits.map(exploit => 
      exploit.id === id ? { ...exploit, ...updates } : exploit
    );
    saveToLocalStorage(updatedExploits);
  };

  const deleteExploit = async (id: string) => {
    if (useFirebase) {
      try {
        await deleteDoc(doc(db, 'exploits', id));
        return;
      } catch (error) {
        console.error('Firebase delete error, falling back to localStorage:', error);
        setUseFirebase(false);
      }
    }

    const updatedExploits = exploits.filter(exploit => exploit.id !== id);
    saveToLocalStorage(updatedExploits);
  };

  return {
    exploits,
    loading,
    error: error || (useFirebase ? null : 'Mode local - Données sauvegardées localement'),
    addExploit,
    updateExploit,
    deleteExploit,
    isOnline: useFirebase
  };
}
