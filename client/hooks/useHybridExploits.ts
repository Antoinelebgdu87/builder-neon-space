import { useState, useEffect } from "react";
import {
  collection,
  addDoc,
  updateDoc,
  deleteDoc,
  doc,
  onSnapshot,
  serverTimestamp,
} from "firebase/firestore";
import { db } from "@/lib/firebase";
import { shouldUseFirebaseOnly } from "@/utils/cleanupLocalStorage";
import {
  isFirebaseDisabled,
  handleFirebaseError,
} from "@/utils/firebaseProtection";

export interface Exploit {
  id?: string;
  name: string;
  description: string;
  imageUrl: string;
  downloads: string;
  platforms: string[];
  isVerified?: boolean;
  isPopular?: boolean;
  gradient?: string;
  downloadUrl?: string;
  createdAt?: any;
  updatedAt?: any;
}

export function useHybridExploits() {
  const [exploits, setExploits] = useState<Exploit[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [useFirebase, setUseFirebase] = useState(false); // FORCE MODE LOCAL

  useEffect(() => {
    // Firebase d√©sactiv√© - Mode local uniquement
    if (false) {
      // D√©sactiv√© temporairement
      try {
        const unsubscribe = onSnapshot(
          collection(db, "exploits"),
          (snapshot) => {
            try {
              const exploitsData = snapshot.docs.map((doc) => ({
                id: doc.id,
                ...doc.data(),
              })) as Exploit[];

              exploitsData.sort((a, b) => {
                if (!a.createdAt || !b.createdAt) return 0;
                return (
                  new Date(b.createdAt.toDate()).getTime() -
                  new Date(a.createdAt.toDate()).getTime()
                );
              });

              setExploits(exploitsData);
              setError(null);
              setLoading(false);
            } catch (err) {
              console.error("Error processing Firebase data:", err);
              setUseFirebase(false);
              setLoading(false);
            }
          },
          (err) => {
            console.error("Firebase permission error:", err);
            const isNetworkError = handleFirebaseError(err);
            setUseFirebase(false);

            if (isNetworkError) {
              setError("üì∂ Connexion Firebase impossible - Mode hors ligne");
            } else if (err.code === "permission-denied") {
              setError("‚ö†Ô∏è Firebase: Permissions insuffisantes");
            } else {
              setError("Erreur Firebase - Tentative de reconnexion...");
            }
            setLoading(false);
          },
        );

        return () => unsubscribe();
      } catch (error) {
        console.error("Failed to setup Firebase listener:", error);
        handleFirebaseError(error);
        setUseFirebase(false);
        setLoading(false);
      }
    } else {
      setLoading(false);
    }
  }, [useFirebase]);

  const addExploit = async (
    exploit: Omit<Exploit, "id" | "createdAt" | "updatedAt">,
  ) => {
    try {
      const docRef = await addDoc(collection(db, "exploits"), {
        ...exploit,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp(),
      });

      return { id: docRef.id, ...exploit };
    } catch (error) {
      console.error("Erreur ajout exploit:", error);
      throw error;
    }
  };

  const updateExploit = async (id: string, updates: Partial<Exploit>) => {
    try {
      await updateDoc(doc(db, "exploits", id), {
        ...updates,
        updatedAt: serverTimestamp(),
      });
    } catch (error) {
      console.error("Erreur mise √† jour exploit:", error);
      throw error;
    }
  };

  const deleteExploit = async (id: string) => {
    try {
      await deleteDoc(doc(db, "exploits", id));
    } catch (error) {
      console.error("Erreur suppression exploit:", error);
      throw error;
    }
  };

  return {
    exploits,
    loading,
    error:
      error ||
      (useFirebase ? null : "Mode local - Donn√©es sauvegard√©es localement"),
    addExploit,
    updateExploit,
    deleteExploit,
    isOnline: useFirebase,
  };
}
