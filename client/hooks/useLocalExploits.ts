import { useState, useEffect } from 'react';

export interface Exploit {
  id?: string;
  name: string;
  description: string;
  icon: string;
  downloads: string;
  platforms: string[];
  isVerified?: boolean;
  isPopular?: boolean;
  gradient?: string;
  downloadUrl?: string;
}

const LOCAL_STORAGE_KEY = 'sysbreak_exploits';

export function useLocalExploits() {
  const [exploits, setExploits] = useState<Exploit[]>([]);
  const [loading, setLoading] = useState(true);

  const loadExploits = () => {
    try {
      const stored = localStorage.getItem(LOCAL_STORAGE_KEY);
      if (stored) {
        const parsedExploits = JSON.parse(stored);
        setExploits(parsedExploits);
      }
    } catch (error) {
      console.error('Error loading exploits from localStorage:', error);
    } finally {
      setLoading(false);
    }
  };

  const saveExploits = (newExploits: Exploit[]) => {
    try {
      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(newExploits));
      setExploits(newExploits);
    } catch (error) {
      console.error('Error saving exploits to localStorage:', error);
      throw error;
    }
  };

  const addExploit = async (exploit: Omit<Exploit, 'id'>) => {
    try {
      const newExploit = {
        ...exploit,
        id: Date.now().toString() + Math.random().toString(36).substr(2, 9)
      };
      
      const updatedExploits = [...exploits, newExploit];
      saveExploits(updatedExploits);
      return newExploit;
    } catch (error) {
      console.error('Error adding exploit:', error);
      throw error;
    }
  };

  const updateExploit = async (id: string, updatedData: Partial<Exploit>) => {
    try {
      const updatedExploits = exploits.map(exploit => 
        exploit.id === id ? { ...exploit, ...updatedData } : exploit
      );
      saveExploits(updatedExploits);
    } catch (error) {
      console.error('Error updating exploit:', error);
      throw error;
    }
  };

  const deleteExploit = async (id: string) => {
    try {
      const updatedExploits = exploits.filter(exploit => exploit.id !== id);
      saveExploits(updatedExploits);
    } catch (error) {
      console.error('Error deleting exploit:', error);
      throw error;
    }
  };

  useEffect(() => {
    loadExploits();
  }, []);

  return {
    exploits,
    loading,
    addExploit,
    updateExploit,
    deleteExploit,
    refetch: loadExploits
  };
}
