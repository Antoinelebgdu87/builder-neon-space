import { useState, useEffect } from "react";
import {
  collection,
  getDocs,
  addDoc,
  deleteDoc,
  doc,
  updateDoc,
} from "firebase/firestore";
import { db } from "@/lib/firebase";

export interface Exploit {
  id?: string;
  name: string;
  description: string;
  icon: string;
  downloads: string;
  platforms: string[];
  isVerified?: boolean;
  isPopular?: boolean;
  gradient?: string;
  downloadUrl?: string;
}

export function useExploits() {
  const [exploits, setExploits] = useState<Exploit[]>([]);
  const [loading, setLoading] = useState(true);

  const fetchExploits = async () => {
    try {
      const querySnapshot = await getDocs(collection(db, "exploits"));
      const exploitsData = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      })) as Exploit[];
      setExploits(exploitsData);
    } catch (error) {
      console.error("Error fetching exploits:", error);
    } finally {
      setLoading(false);
    }
  };

  const addExploit = async (exploit: Omit<Exploit, "id">) => {
    try {
      const docRef = await addDoc(collection(db, "exploits"), exploit);
      const newExploit = { id: docRef.id, ...exploit };
      setExploits((prev) => [...prev, newExploit]);
      return newExploit;
    } catch (error) {
      console.error("Error adding exploit:", error);
      throw error;
    }
  };

  const updateExploit = async (id: string, exploit: Partial<Exploit>) => {
    try {
      await updateDoc(doc(db, "exploits", id), exploit);
      setExploits((prev) =>
        prev.map((item) => (item.id === id ? { ...item, ...exploit } : item)),
      );
    } catch (error) {
      console.error("Error updating exploit:", error);
      throw error;
    }
  };

  const deleteExploit = async (id: string) => {
    try {
      await deleteDoc(doc(db, "exploits", id));
      setExploits((prev) => prev.filter((item) => item.id !== id));
    } catch (error) {
      console.error("Error deleting exploit:", error);
      throw error;
    }
  };

  useEffect(() => {
    fetchExploits();
  }, []);

  return {
    exploits,
    loading,
    addExploit,
    updateExploit,
    deleteExploit,
    refetch: fetchExploits,
  };
}
